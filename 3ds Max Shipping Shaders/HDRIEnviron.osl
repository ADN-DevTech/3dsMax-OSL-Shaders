// HDRI Loader
// HDRIEnviron.osl, by Zap Andersson
// Modified: 2020-01-27
// Copyright 2020 Autodesk Inc, All rights reserved. This file is licensed under Apache 2.0 license
//    https://github.com/ADN-DevTech/3dsMax-OSL-Shaders/blob/master/LICENSE.txt

shader HDRIenv
[[ string help  = 
     "<h3>HDRI Environment</h3> Environment shader with exposure "
     "adjustments,<br> ground projection mode, and separation between<br> "
     "<b>Background</b> and <b>Environment</b>",
   string version  = "1.0.0",
   string category = "Environment",
   string label = "HDRI Environment" ]]
(
	string HDRI="HDRI\palermo_square_2k.hdr"  
		[[ string widget="filename",
		   string label ="HDRI file name" 
		]],
	float  Rotation = 0 
		[[ float min = -360.0, float max = 360.0,
		   int connectable=0, float step = 1.0		
		]],
	int    Flip = 0 
		[[ string widget = "checkBox",
		   int connectable = 0 ]],
	float  TiltX = 0 
		[[ float min = -360.0, float max = 360.0,
		   int connectable=0, float step = 0.1		
		]],
	float  TiltY = 0 
		[[ float min = -360.0, float max = 360.0,
		   int connectable=0, float step = 0.1
		]],
	float  Height = 0 
		[[ float min = -1.0, float max = 1.0,
		   int connectable=0, float step = 0.001		
		]],
	float  Exposure = 0 
		[[ float min = -100, float max = 100,
		   string packName="Exposure/Contrast",
		   int connectable=0
		]],
	color  Tint = 1.0
		[[ string packName="Exposure/Contrast",
		   int connectable=0
		]],
	float  Contrast = 1.0 
		[[ float min=0.01, float max = 100.0,
			string packName="Exposure/Contrast",
			int connectable=0			
		]],
	float  Viewport = 1.0
		[[ float min = 0.0, float max = 100.0,
		   string label ="Viewport Multiplier",
		   int connectable=0
		]],		
	
	int GroundProjection=0 
		[[ string widget="checkBox",
		   int connectable=0
		]],
	point GroundCenter=0 
		[[ int connectable=0 ]],
	float GroundRadius=1.5 // Default is in meters
		[[ int connectable=0, int worldunits=1 ]],
	int UseBackground= 0
		[[ string widget="checkBox",
		   string label = "Use Background",
		   int connectable = 0
		]],
	color Background = 0.0,
	float BackgroundMultiplier = 1.0
		[[ string label = "Background Multiplier",
		   int connectable=0 ]],
	color AdditionalLight    = 0.0
		[[ string label = "Additional Light" ]],	 
	float AdditionalLightMul = 1.0
		[[ string label = "Additional Light Multiplier", int connectable=0 ]],	 
	int Blur = 0 
		[[ string widget = "checkBox",
		   int connectable = 0 ]],
	float BlurAmount = 1.0 	
		[[ float min = 0.0, float max = 25.0, int connectable=0 ]],
	int   BlurSamples = 16
		[[ int min = 1, int max = 256, int connectable=0 ]],
	int   Clamp = 1 
		[[ string widget = "checkBox",
		   int connectable = 0 ]],
	float ClampStops = 10.0 	
		[[ float min = -10.0, float max = 30.0, float step = 0.1, int connectable=0 ]],
	// Output
	output color Out = 0 
)
{
	if (UseBackground && raytype("camera"))
	{
		Out = Background * BackgroundMultiplier;
		return;
	}
	
	float power = Contrast;
	
	if (!endswith(HDRI, ".exr") &&
		!endswith(HDRI, ".EXR") &&
		!endswith(HDRI, ".hdr") &&
		!endswith(HDRI, ".HDR") &&
		!endswith(HDRI, ".tx")  &&
		!endswith(HDRI, ".TX"))
	{
		// Gamma 2.2 for sRGB approx)
		power *= 2.2;
	}	
	
	float U = 0.0, V = 0.0; 
	vector Direction  = transform("world", I);
	vector OrgDir     = Direction;
	point  CP         = transform("camera", point(0,0,0));

	point  Position   = transform("world", P);
	
	int    HLSLBackend = 0; // Is this the 3ds max viewport?
	string renderer; 
	getattribute("renderer:name", renderer);
	if (renderer == "3dsmax:hlsl")
		HLSLBackend = 1;

	// Workaround for Arnolds odd P behaviour in environments....
	if (Position == 0.0)
		Position = transform("camera", "world", point(0));

	int doBlur = Blur && BlurAmount > 0.0?raytype("camera"):0;
				
	int samples = doBlur?BlurSamples:1;
	
	for (int i = 0; i < samples; i++)
	{
		if (doBlur)
			Direction = OrgDir + (noise("hash", I, i) - 0.5) * BlurAmount / 100.0;
	
		// Ground Projection mode is on, and direction is pointing down?
		if (GroundProjection == 1 && Direction[2] < 0.0)
		{
			// Compute intersection with virtual ground plane
			float t = (GroundCenter[2] - Position[2])/Direction[2];
			point GP = Position + Direction * t;
			
			// Assume we are doing the ground
			int   doGround = 1;
		
			// Special case for the viewport:	
			if (HLSLBackend)
			{
				// Detect if we are in the environment rendering
				// stage for Nitrous reflection maps. If so,
				// do not apply the special mapping ground mapping, 
				// just do regular spherical mapping....
				if (distance(GP, CP) < 1e-4)
					doGround = 0;
			}
			
			if (doGround)
			{
				// Compute virtual projection point rays are projecting from
				point TP = GroundCenter + vector(0, 0, GroundRadius);
				// Use direction from that point to the groundplane as the
				// new virtual direction
				Direction = normalize(GP-TP);
				
				// Smoothen out the joint a bit....
				// Thanks to Vlado for suggestion!
				if (Direction[2] > -0.1)
				{
					float fac = 1.0 - Direction[2] * -10.0;
					fac *= fac;
					
					Direction = mix(Direction, OrgDir, fac);
				}
			}
		} 
	
		if (TiltX != 0.0)
			Direction = rotate(Direction, radians(TiltX), vector(0.0), vector(1,0,0));
		if (TiltY != 0.0)
			Direction = rotate(Direction, radians(TiltY), vector(0.0), vector(0,1,0));	
	
		// Compute texture UV's in a spherical environment map...
		U = (Rotation / 360.0) + atan2(Direction[0],Direction[1]) / (M_PI * 2.0);
		V = 0.5 + (asin(Direction[2]) / M_PI);
	
		// Adjust the height by sin(z)
		V -= Height * sqrt((1.0 - (Direction[2]*Direction[2])));
	
		// Look up the texture
		Out += texture(HDRI, Flip?-U:U, 1.0-V, "wrap", "periodic") * Tint;
	}
	
	Out /= samples;
	
	if (Clamp)
		Out = clamp(Out, 0.0, pow(2.0, ClampStops));
	else
	{
		// Just avoid negative numbers
		if (Out[0] < 0.0) Out[0] = 0.0;
		if (Out[1] < 0.0) Out[1] = 0.0;
		if (Out[2] < 0.0) Out[2] = 0.0;
	}
	
	// Apply overall Exposure and Contrast
	Out = pow(Out, power) * pow(2.0, Exposure);	
	
	// Add Additional Light
	Out += AdditionalLight * AdditionalLightMul;

	// Viewport shading? Adjust intensity accordingly	
	if (HLSLBackend)
		Out *= Viewport;
}
