// Lookup a bitmap bitmap with OSL
// OSLBitmap.osl, by Zap Andersson
// Modified: 2018-02-08
// Copyright 2018 Autodesk Inc, All rights reserved. This file is licensed under Apache 2.0 license
//    https://github.com/ADN-DevTech/3dsMax-OSL-Shaders/blob/master/LICENSE.txt

shader OSLBitmap
[[ string help  = "Look up a bitmap from passed in UV coordinates<br/>(through OpenImageIO)",
   string label = "Bitmap Lookup" ]]
(  
  point  Pos   = point(u,v,0) 
  	[[  string label= "UV Coordinate", 
  		string help = "The 2D coordiante at which the texture is looked up." ]],
  float  Scale  = 1.0
  	[[  string help = "A linear scale factor. For more complex UV manipluation, connect the UVWTransform." ]], 
  
  string Filename = "uv-grid.png" 
  	[[ string widget="filename", 
  	   string label="File name",
  	   string help="The name of the texture to look up" ]], 
  string WrapMode = "periodic"
  	[[ string widget="popup", string options = "default|black|clamp|periodic|mirror",
  	   string label="Wrap Mode",
  	   string help="How the texture wraps: (black, clamp, periodic or mirror)." ]],
 
  int    AutoGamma   = 1   
  	[[ string widget="checkBox" ]],
  float  ManualGamma = 1.0 
  	[[ string label="Manual Gamma" ]],
    
  output color Col = 0     [[ string label="Col (RGB)" ]],
  output float R = 0,
  output float G = 0,
  output float B = 0,
  output float A = 1,
  output float Luminance = 0,
  output float Average = 0
)
{
	point p = Pos  / Scale;

	
	Col  = texture(Filename, p[0], 1.0-p[1], "wrap", WrapMode, "alpha", A);
	
	int channels;
	gettextureinfo(Filename, "channels", channels);
	if (channels < 4) // No alpha? Set it to opaque
		A = 1.0;
	

	// Temporary workaround for color space issues
	if (AutoGamma)
	{
		if (!endswith(Filename, ".exr") &&
			!endswith(Filename, ".EXR") &&
			!endswith(Filename, ".hdr") &&
			!endswith(Filename, ".HDR") &&
			!endswith(Filename, ".tx")  &&
			!endswith(Filename, ".TX"))
		{
			// Gamma 2.2 for sRGB approx)
			Col = pow(Col, 2.2);
		}
	}
	else
	{
		if (ManualGamma != 1.0)
			Col = pow(Col, ManualGamma);
	}
	
	R = Col[0];
	G = Col[1];
	B = Col[2];
	Luminance = luminance(Col);
	Average   = (R + G + B) / 3.0;
}