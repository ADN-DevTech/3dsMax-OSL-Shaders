// Gradient Shader with any number of inputs
// SimpleGradient.osl, by Zap Andersson
// Modified: 2019-11-14
// Copyright 2019 Autodesk Inc, All rights reserved. This file is licensed under Apache 2.0 license
//    https://github.com/ADN-DevTech/3dsMax-OSL-Shaders/blob/master/LICENSE.txt

shader Gradient2
	[[ string help    = "A Gradient with arbitrary number of inputs.", 
	   string version = "2.0",
	   string label   = "Simple Gradient" ]]
(
	point Input = point(u,v,0),

	int   Layers   = 6 [[ int min=2, int max=26, int connectable=0, string widget = "null" ]],
	string Add = "Add Layer" 
	[[
		string widget   = "max:actionButton", int connectable = 0, string packName = " ",
		string actionID = "UpdateGradientShader(1)"
	]], 
	string Delete = "Delete Layer"
	[[
		string widget   = "max:actionButton", int connectable = 0, string packName = " ",
		string actionID = "UpdateGradientShader(-1)"
	]],
	float Hardness = 0.0 [[ float min = 0.0, float max = 0.999 ]],
                         
#define PAR(x, val, col)   \
	color x##_Col   = col [[ string label = "  " #x " Color Value  " ]],         \
	float x##_Pos   = val [[ string label = "  " #x " Position " ]], 

	//====PAR-BEGIN====
	PAR(A, 0.0,  color(0.965926, 0.34202, 0.173648))
	PAR(B, 0.2,  color(0.866025, 0.642788, 0.34202))
	PAR(C, 0.4,  color(0.707107, 0.866025, 0.5))
	PAR(D, 0.6,  color(0.5, 0.984808, 0.642788))
	PAR(E, 0.8,  color(0.258819, 0.984808, 0.766044))
	PAR(F, 1.0,  color(0.0, 0.866025, 0.866025))
	//====PAR-END====
	
	// Inputs
	output color Out = 0.0)
{	
	Out = A_Col;
	float inValue = Input[0]; // We use X coordinate of point

#define INT(x,y) \
	if (inValue >= x##_Pos && inValue < y##_Pos) \
	{ \
		float where = (inValue - x##_Pos) / (y##_Pos - x##_Pos); \
		where = smoothstep(Hardness, 1.0, where); \
		Out = mix(x##_Col, y##_Col, where); \
	} 

	//====INT-BEGIN====
	INT(A, B)
	INT(B, C)
	INT(C, D)
	INT(D, E)
	INT(E, F)
	//====INT-END====
}
