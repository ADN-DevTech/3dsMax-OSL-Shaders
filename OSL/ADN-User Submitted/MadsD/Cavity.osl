// Cavity map
// Cavity.osl, by Mads Dr√∏schler
// License: Apache 2.0 License
// https://github.com/ADN-DevTech/3dsMax-OSL-Shaders/blob/master/LICENSE.txt

// The cavity map needs UV cooridinates and an input bitmap


shader Cavity [[ string help="Cavity map from normals" ]]
(  
	// UV in
	vector UV = 1,
    
    // File in
    string Filename ="uv-grid.png"[[ string widget="filename",string label="File name",string help="The name of the texture to look up" ]], 
    
    //Output
    output vector Out  = 0,
)
{
	// Derivatives
	float V = 0.000977;
	vector DerA = vector (V,0,0);
	vector DerB = vector (0,V,0);

	// Add Derivatives to UV
	vector VecADD  = UV + DerA; 
	vector VecADD2 = UV + DerB;
	
	// Subtract Derivatives from UV
	vector  VecSUB = UV - DerA;
	vector VecSUB2 = UV - DerB;
	
	// Constants and variable init
	float A = 1.0;
	color C1 = 0;color C2 = 0;color C3 = 0;color C4 = 0;
    
    // Bitmap lookup with intergrated UV derivatives
    C1  = texture(Filename,  VecADD[0], A-VecADD[1] ,"","","",A,"interp","linear");
	C2  = texture(Filename, VecADD2[0], A-VecADD2[1],"","","",A,"interp","linear");
	C3  = texture(Filename,  VecSUB[0], A-VecSUB2[1],"","","",A,"interp","linear");
    C4  = texture(Filename, VecSUB2[0], A-VecSUB2[1],"","","",A,"interp","linear");
   	
   	// Output - subtract channel 1&3 and 2&4, give both a ConstantBiasScale and multiply them
   	Out = (((C1[0] - C3[0])+1)*0.5)*(((C2[1] - C4[1])+1)*0.5);
   		
}